{"version":3,"sources":["components/Title.jsx","Firebase/config.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.jsx","hooks/useFirestore.js","components/ImageGrid.jsx","components/Modal.jsx","App.js","reportWebVitals.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","motion","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","layout","whileHover","opacity","s","onClick","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4854a66d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title =()=>{\n    return(\n        <div className=\"title\">\n            <h1>PhotoGram</h1>\n            <h2>Your Pictures</h2>\n            <center>\n                <p>Add Some More Pictures to your PhotoGram</p>\n            </center>\n            </div>\n    )\n}\n\nexport default Title;"," import  firebase from 'firebase/app';\n import 'firebase/storage';\n import 'firebase/firestore';\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBjfspQdJEvuxoaWgfySxjJPuhPAwSohdo\",\n    authDomain: \"wallpaper-firegram.firebaseapp.com\",\n    projectId: \"wallpaper-firegram\",\n    storageBucket: \"wallpaper-firegram.appspot.com\",\n    messagingSenderId: \"1053594445553\",\n    appId: \"1:1053594445553:web:2380c9e1b1eed111b66b50\",\n    measurementId: \"G-F349RZSX9B\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  \n\n\n  const projectStorage=firebase.storage();\n  const projectFirestore=firebase.firestore();\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  export {projectStorage,projectFirestore,timestamp};","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../Firebase/config';\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n\n  useEffect(() => {\n    // references\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images');\n    \n    storageRef.put(file).on('state_changed', (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n      setProgress(percentage);\n    }, (err) => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp();\n      await collectionRef.add({ url, createdAt });\n      setUrl(url);\n    });\n  }, [file]);\n\n  return { progress, url, error };\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\nimport { motion } from 'framer-motion';\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { progress, url } = useStorage(file);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <motion.div className=\"progress-bar\"\n      initial={{ width: 0 }}\n      animate={{ width: progress + '%' }}\n    ></motion.div>\n  );\n} \n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport ProgressBar from './ProgressBar';\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  const types = ['image/png', 'image/jpeg'];\n\n  const handleChange = (e) => {\n    let selected = e.target.files[0];\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError('');\n    } else {\n      setFile(null);\n      setError('Please select an image file (png or jpg)');\n    }\n  };\n\n  return (\n    <form>\n      <label>\n        <input type=\"file\" onChange={handleChange} />\n        <span>+</span>\n      </label>\n      <div className=\"output\">\n        { error && <div className=\"error\">{ error }</div>}\n        { file && <div>{ file.name }</div> }\n        { file && <ProgressBar file={file} setFile={setFile} /> }\n      </div>\n    </form>\n  );\n}\n\nexport default UploadForm;","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../Firebase/config';\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(snap => {\n        let documents = [];\n        snap.forEach(doc => {\n          documents.push({...doc.data(), id: doc.id});\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n  \n  }, [collection]);\n\n  return { docs };\n}\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore('images');\n\n  return (\n    <div className=\"img-grid\">\n      {docs && docs.map(doc => (\n        <motion.div className=\"img-wrap\" key={doc.id} \n          layout\n          whileHover={{ opacity: 1 }}s\n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <motion.img src={doc.url} alt=\"uploaded pic\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React, { useState } from 'react';\nimport Title from './components/Title';\nimport UploadForm from './components/UploadForm';\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}